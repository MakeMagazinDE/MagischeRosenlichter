//-----------------------------------------------------------------------------
//  ConsoleCmds.cpp
/// @file
///
/// @brief Contains all CLI-command functions
///
/// $Date: 2022-08-26 12:08:51 +0200 (Fr, 26 Aug 2022) $
/// $Revision: 169 $
/// $LastChangedBy: EMueller $
///
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Standard include files
//-----------------------------------------------------------------------------
#include <arduino.h>

//-----------------------------------------------------------------------------
// Project specific include files
//-----------------------------------------------------------------------------
#include "ConsoleCmds.h"
#include "CCmdPreferences.h"
#include "CCmdSpiFfs.h"
#include "CCmdEffects.h"

#include "defs.h"

#include "FreeRTOS_CLI.h"

//-----------------------------------------------------------------------------
// Privat definitions, macros and constants
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Private data types
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// External references
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Prototypes of private functions
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Global members of the module
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Implementation
//-----------------------------------------------------------------------------

/// Header line for task status list
static const char * const pcTaskStatusHeader = "Name          State   Prio    Stack    Nr\r\n";

// Formats the freertos task list into a buffer
void OS_GetTaskList(char * pcWriteBuffer);

//-----------------------------------------------------------------------------
//  Function TaskStatsCommandFct
///
/// @brief Command function for 'Task status'-command
///
/// @param[out] *pcWriteBuffer - Buffer for command answer string
///
/// @param[in] xWriteBufferLen - Maximum size of the buffer for command answer string
///
/// @param[in] *pcCommandString - CLI-command string
///
/// @return Processing flag: pdFALSE - Command processed completely, pdTrue - 
///         Command not completely processed, function must be called another one
///
/// @see CCmd_RegCmd_Preferences()
///
//-----------------------------------------------------------------------------
static BaseType_t TaskStatsCommandFct( char *pcWriteBuffer,
                                       size_t xWriteBufferLen,
                                       const char *pcCommandString )
{
   UNUSED(pcCommandString);

    /* For simplicity, this function assumes the output buffer is large enough
    to hold all the text generated by executing the vTaskList() API function,
    so the xWriteBufferLen parameter is not used. */
    (void) xWriteBufferLen;

    memcpy(pcWriteBuffer, pcTaskStatusHeader, strlen( pcTaskStatusHeader ));

    /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
    generated by executing vTaskList() is written directly into the output
    buffer. */
    OS_GetTaskList ((pcWriteBuffer + strlen(pcTaskStatusHeader)));

    if (strlen(pcWriteBuffer) > xWriteBufferLen)
    {
       strcpy(pcWriteBuffer, "Zu viele Daten! Puffer zu klein!\r\n");
    }

    /* The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE. */
     return pdFALSE;
}

/// Command structure for the 'taskStats'-command
const CLI_Command_Definition_t xTaskStatsCommand =
{
    "taskStats",
    "taskStats: Shows the status from the tasks\r\n",
    TaskStatsCommandFct,
    0
};

//-----------------------------------------------------------------------------
//  Function RegisterCommands
///
/// @brief Registers all commands for the console
///
/// This function registers all commands for the console.
///
//-----------------------------------------------------------------------------
void RegisterCommands(void)
{
   FreeRTOS_CLIRegisterCommand( &xTaskStatsCommand );

   CCmd_RegCmd_SpiFfs();

   CCmd_RegCmd_Preferences();

   CCmd_RegCmd_Effects();
}

//-----------------------------------------------------------------------------
//  Function void OS_GetTaskList(char * pcWriteBuffer)
///
/// @brief Formats the FreeRTOS task list into a buffer
///
/// @param[out] *pcWriteBuffer - FreeRTOS task list
///
//-----------------------------------------------------------------------------
void OS_GetTaskList(char * pcWriteBuffer)
{
   // we need another libfreertos.a, but it's not so easy to build
#if 0
   vTaskList(pcWriteBuffer);
#endif
}